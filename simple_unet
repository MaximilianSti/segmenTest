
#%%Imports

import keras
import numpy as np
import os
from PIL import Image
from keras.preprocessing.image import img_to_array
from keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Dropout, concatenate

#%% Prepare images

img_size = (2048,2048)
batch_size = 3
input_size = img_size + (1,)

xtrain_dir = "SegmentUConvNet/xtrain/"
ytrain_dir = "SegmentUConvNet/ytrain/"
xtest_dir = "SegmentUConvNet/xtest/"
ytest_dir = "SegmentUConvNet/ytest/"

xtrain_img_paths = sorted([os.path.join(xtrain_dir, fname) for fname in os.listdir(xtrain_dir) if fname.endswith(".tif")])
ytrain_img_paths = sorted([os.path.join(ytrain_dir, fname) for fname in os.listdir(ytrain_dir) if fname.endswith(".tif")])
xtest_img_paths = sorted([os.path.join(xtest_dir, fname) for fname in os.listdir(xtest_dir) if fname.endswith(".tif")])
ytest_img_paths = sorted([os.path.join(ytest_dir, fname) for fname in os.listdir(ytest_dir) if fname.endswith(".tif")])


#%% Prepare Sequence class

class img_preprocessing(keras.utils.Sequence):
    """keras Sequence object to be used as input for the model
    Helper to iterate over the data (as Numpy arrays)."""

    def __init__(self, batch_size, img_size, x_img_paths, y_img_paths):
        self.batch_size = batch_size
        self.img_size = img_size
        self.x_img_paths = x_img_paths
        self.y_img_paths = y_img_paths

    def __len__(self):
        return len(self.y_img_paths) // self.batch_size

    def __getitem__(self, idx):
        """
        Returns one batch tuple (x, y) correspond to batch #idx."""
        i = idx * self.batch_size
        batch_x_img_paths = self.x_img_paths[i : i + self.batch_size]
        batch_y_img_paths = self.y_img_paths[i : i + self.batch_size]
        x = np.zeros((self.batch_size,) + self.img_size + (1,), dtype="float32") 
        for j, path in enumerate(batch_x_img_paths):
            img = img_to_array(Image.open(path))
            img = img/65535.
            x[j] = img
        y = np.zeros((self.batch_size,) + self.img_size + (1,), dtype="uint8")
        for j, path in enumerate(batch_y_img_paths):
            img = img_to_array(Image.open(path)) 
            img = img/65535.
            img[img > 0.5] = 1
            img[img <=0.5] = 0
            y[j] = img 
        return (x, y)

#%% Preprocess data

train_data = img_preprocessing(batch_size, img_size, xtrain_img_paths, ytrain_img_paths)
test_data = img_preprocessing(batch_size, img_size, xtest_img_paths, ytest_img_paths)

#%% Define model

def simp_unet(input_size):
    inputs = keras.Input(shape = input_size)
    conv1 = Conv2D(64, 3, activation = 'relu', padding = 'same', kernel_initializer = 'he_normal')(inputs)
    conv2 = Conv2D(1, 1, activation = 'sigmoid')(conv1)
    model = keras.Model(inputs = inputs, outputs = conv2)
    return model

# Free up RAM in case the model definition cells were run multiple times
keras.backend.clear_session()

mymodel = simp_unet(input_size)
mymodel.summary()
mymodel.compile(optimizer="rmsprop", loss="sparse_categorical_crossentropy")


#%% Train model


callbacks = [keras.callbacks.ModelCheckpoint("segmentation.h5", save_best_only=True)]
epochs = 1

mymodel.fit(train_data, steps_per_epoch = 3,epochs=epochs, callbacks=callbacks)

#%% Test model

results = mymodel.predict(test_data,verbose=1)
